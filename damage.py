# -*- coding: utf-8 -*-
"""Damage.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L7JCnwSGbT05WR6Rlt4CYfmOSi9xUwLe
"""

import streamlit as st
from tensorflow.keras.models import load_model
import numpy as np
from PIL import Image
import pydeck as pdk

# -------------------------
# Load model
# -------------------------
@st.cache_resource
def load_keras_model():
    return load_model("damaged_building_model.keras")

model = load_keras_model()

# -------------------------
# Preprocess image
# -------------------------
def preprocess_image(img, target_size=(224, 224)):
    img = img.resize(target_size)
    img_array = np.array(img).astype("float32")
    img_array = np.expand_dims(img_array, axis=0)
    from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
    return preprocess_input(img_array)

# -------------------------
# Upload image
# -------------------------
uploaded_file = st.file_uploader("Upload a building image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption="Uploaded Image", use_container_width=True)

    processed = preprocess_image(image)
    preds = model.predict(processed)
    class_names = ["Damaged", "Undamaged"]
    pred_class = class_names[np.argmax(preds)]
    confidence = float(np.max(preds))

    st.subheader("Prediction Result")
    st.write(f"üèóÔ∏è **{pred_class}** (Confidence: {confidence:.2f})")

    # -------------------------
    # Location input
    # -------------------------
    st.subheader("üìç Location on Map")
    lat = st.number_input("Latitude", value=39.9208)   # √∂rnek Ankara
    lon = st.number_input("Longitude", value=32.8541)

    if st.button("Add to Map"):
        color = [255, 0, 0] if pred_class == "Damaged" else [0, 255, 0]
        data = [{"lat": lat, "lon": lon, "label": pred_class}]

        st.pydeck_chart(pdk.Deck(
            initial_view_state=pdk.ViewState(latitude=lat, longitude=lon, zoom=8),
            layers=[
                pdk.Layer(
                    "ScatterplotLayer",
                    data=data,
                    get_position="[lon, lat]",
                    get_color=color,
                    get_radius=50000,
                )
            ],
            tooltip={"text": "{label}"}
        ))

